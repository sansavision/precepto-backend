# AUTOGENERATED FROM 'common/queries/transcriptions/transcript_create.edgeql' WITH:
#     $ edgedb-py --tls-security=insecure -P 5656 -d precepto --dir ./common/queries


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import enum
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class TranscriptCreateResult(NoPydanticValidation):
    id: uuid.UUID


class TranscriptionBackendStatusType(enum.Enum):
    DRAFT = "draft"
    RECORDING_SERVICE = "recording_service"
    TRANSCRIPTION_SERVICE = "transcription_service"
    SUMMARIZATION_SERVICE = "summarization_service"
    COMPLETED = "completed"
    FAILED = "failed"


class TranscriptionStatusType(enum.Enum):
    SIGNED = "signed"
    NOT_SIGNED = "not_signed"
    QUEUED = "queued"
    FAILED = "failed"
    PROCESSING = "processing"
    DRAFT = "draft"


async def transcript_create(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    status: TranscriptionStatusType,
    backend_status: TranscriptionBackendStatusType,
    place_in_queue: int | None = None,
    next_backend_step: str | None = None,
    backend_step: str,
    backend_step_duration: float,
    backend_step_is_success: bool,
    template_id: uuid.UUID,
    user_id: uuid.UUID,
    audio_url: str | None = None,
    transcript: str | None = None,
    final_transcript: str | None = None,
    backend_updated_at: datetime.datetime | None = None,
    duration: float | None = None,
    words: int | None = None,
    speakers: int | None = None,
    confidence: float | None = None,
    language: str | None = None,
    speaker_labels: bool | None = None,
    translation_language: str,
    translation: str,
    summary: str | None = None,
    notes: str | None = None,
    marked_for_delete: bool | None = None,
    marked_for_delete_date: datetime.datetime | None = None,
) -> TranscriptCreateResult:
    return await executor.query_single(
        """\
        # Create a new transcription
        select (
        INSERT Transcription {
            name := <str>$name,
            status := <TranscriptionStatusType>$status,
            backend_status := <TranscriptionBackendStatusType>$backend_status,
            place_in_queue := <optional int16>$place_in_queue,
            next_backend_step := <optional str>$next_backend_step,
            analytics := { (insert Analytics { 
                                    backend_step:= <str>$backend_step,
                                    duration:= <float32>$backend_step_duration,
                                    is_success:= <bool>$backend_step_is_success
                                })},
            template :=   (select Template filter .id = <uuid>$template_id),
            created_by :=  (select User filter .id = <uuid>$user_id),
            audio_url := <optional str>$audio_url,
            transcript := <optional str>$transcript,
            final_transcript := <optional str>$final_transcript,
            backend_updated_at := <optional datetime>$backend_updated_at,
            duration := <optional float32>$duration,
            words := <optional int16>$words,
            speakers := <optional int16>$speakers,
            confidence := <optional float32>$confidence,
            language := <optional str>$language,
            speaker_labels := <optional bool>$speaker_labels,
            # keywords := ['keyword1', 'keyword2'],   # TODO: V1.1 make keyqword, topics, actions, translations as array
            # topics := ['topic1', 'topic2'],       
            # actions := ['action1', 'action2'],   
            translations := {(insert Translation { 
                                        language := <str>$translation_language,
                                        translation := <str>$translation
                                })},  # Add all related Translation IDs
            summary := <optional str>$summary,
            notes := <optional str>$notes,
            marked_for_delete := <optional bool>$marked_for_delete,
            marked_for_delete_date := <optional datetime>$marked_for_delete_date
        }){ id };\
        """,
        name=name,
        status=status,
        backend_status=backend_status,
        place_in_queue=place_in_queue,
        next_backend_step=next_backend_step,
        backend_step=backend_step,
        backend_step_duration=backend_step_duration,
        backend_step_is_success=backend_step_is_success,
        template_id=template_id,
        user_id=user_id,
        audio_url=audio_url,
        transcript=transcript,
        final_transcript=final_transcript,
        backend_updated_at=backend_updated_at,
        duration=duration,
        words=words,
        speakers=speakers,
        confidence=confidence,
        language=language,
        speaker_labels=speaker_labels,
        translation_language=translation_language,
        translation=translation,
        summary=summary,
        notes=notes,
        marked_for_delete=marked_for_delete,
        marked_for_delete_date=marked_for_delete_date,
    )
